using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class MathQuiz : MonoBehaviour
{
    public GameObject questionPanel;
    public Text questionText;
    public InputField answerInput;
    public Crash crashScript;
    public RegularCar carController; // Referencia al controlador de velocidad del coche

    private List<(string, int)> questions;
    private bool isPaused;

    void Start()
    {
        questionPanel.SetActive(false);

        // Preguntas
        questions = new List<(string, int)> {
            ("5 + 3", 8), ("10 - 4", 6), ("2 * 3", 6), ("7 + 5", 12), 
            ("9 - 2", 7), ("3 * 4", 12), ("6 / 2", 3), ("8 + 6", 14), 
            ("15 - 7", 8), ("2 * 5", 10), ("12 / 3", 4), ("4 + 9", 13), 
            ("10 - 3", 7), ("3 * 6", 18), ("20 - 10", 10), ("7 + 8", 15), 
            ("18 / 6", 3), ("5 * 5", 25), ("14 - 6", 8), ("9 + 4", 13), 
            ("16 / 4", 4), ("8 * 2", 16), ("6 + 11", 17), ("20 - 8", 12), 
            ("10 / 5", 2), ("3 + 9", 12), ("12 - 5", 7), ("7 * 2", 14), 
            ("24 / 6", 4), ("6 + 8", 14), ("15 - 4", 11), ("5 * 4", 20), 
            ("10 + 12", 22), ("18 - 9", 9), ("4 * 7", 28), ("16 / 8", 2), 
            ("11 + 3", 14), ("20 - 5", 15), ("9 * 2", 18), ("25 / 5", 5), 
            ("12 + 7", 19), ("18 - 6", 12), ("2 * 9", 18), ("30 - 10", 20), 
            ("10 + 15", 25), ("20 / 4", 5), ("7 + 9", 16), ("21 - 6", 15), 
            ("8 * 3", 24), ("24 / 8", 3), ("14 + 5", 19), ("18 - 8", 10), 
            ("6 * 3", 18), ("40 / 8", 5), ("13 + 6", 19), ("22 - 7", 15), 
            ("5 * 6", 30), ("50 / 5", 10), ("7 + 12", 19), ("18 - 7", 11), 
            ("4 * 8", 32), ("24 / 4", 6), ("15 + 10", 25), ("12 - 3", 9), 
            ("9 * 3", 27), ("30 / 6", 5), ("8 + 11", 19), ("21 - 4", 17), 
            ("6 * 5", 30), ("45 / 9", 5), ("10 + 18", 28), ("17 - 8", 9), 
            ("3 * 10", 30), ("40 - 15", 25), ("5 + 15", 20), ("20 / 10", 2), 
            ("12 + 14", 26), ("18 - 5", 13), ("2 * 12", 24), ("32 / 8", 4), 
            ("16 + 10", 26), ("25 - 5", 20), ("7 * 4", 28), ("36 / 6", 6), 
            ("14 + 9", 23), ("20 - 6", 14), ("5 * 7", 35), ("49 / 7", 7), 
            ("18 + 3", 21), ("21 - 3", 18), ("6 * 6", 36), ("48 / 8", 6), 
            ("10 + 13", 23), ("27 - 9", 18), ("8 * 4", 32), ("40 / 5", 8), 
            ("15 + 9", 24), ("22 - 5", 17), ("5 * 8", 40), ("50 / 10", 5), 
            ("12 + 11", 23), ("20 - 3", 17), ("3 * 8", 24), ("30 - 6", 24), 
            ("10 + 8", 18), ("18 - 3", 15), ("9 * 4", 36), ("36 / 4", 9), 
            ("7 + 16", 23), ("18 - 12", 6), ("2 * 15", 30), ("60 / 12", 5), 
            ("5 + 17", 22), ("14 - 9", 5), ("7 * 3", 21), ("35 / 7", 5), 
            ("10 + 19", 29), ("22 - 8", 14), ("4 * 9", 36), ("45 / 5", 9), 
            ("12 + 15", 27), ("30 - 7", 23), ("6 * 7", 42), ("42 / 6", 7), 
            ("9 + 18", 27), ("21 - 10", 11), ("5 * 9", 45), ("50 / 10", 5), 
            ("16 + 12", 28), ("25 - 8", 17), ("8 * 3", 24), ("24 / 3", 8), 
            ("7 + 10", 17), ("18 - 4", 14), ("3 * 5", 15), ("45 / 9", 5), 
            ("12 + 20", 32), ("30 - 12", 18), ("6 * 8", 48), ("48 / 6", 8), 
            ("14 + 16", 30), ("40 - 20", 20), ("5 * 6", 30), ("60 / 12", 5), 
            ("9 + 14", 23), ("21 - 15", 6), ("7 * 8", 56), ("56 / 8", 7), 
            ("10 + 25", 35), ("30 - 8", 22), ("8 * 6", 48), ("48 / 12", 4), 
            ("15 + 18", 33), ("40 - 25", 15), ("9 * 7", 63), ("63 / 9", 7), 
            ("11 + 22", 33), ("30 - 10", 20), ("7 * 6", 42), ("42 / 7", 6), 
            ("16 + 14", 30), ("20 - 9", 11), ("5 * 10", 50), ("50 / 5", 10), 
            ("13 + 9", 22), ("25 - 7", 18), ("6 * 9", 54), ("54 / 6", 9), 
            ("18 + 11", 29), ("32 - 6", 26), ("4 * 6", 24), ("24 / 4", 6), 
            ("20 + 5", 25), ("10 - 5", 5), ("9 * 3", 27), ("27 / 9", 3), 
            ("15 + 13", 28), ("25 - 12", 13), ("8 * 5", 40), ("40 / 8", 5), 
            ("14 + 7", 21), ("20 - 15", 5), ("6 * 4", 24), ("24 / 6", 4), 
            ("12 + 18", 30), ("30 - 15", 15), ("7 * 9", 63), ("63 / 7", 9), 
            ("13 + 8", 21), ("22 - 7", 15), ("4 * 8", 32), ("32 / 8", 4), 
            ("18 + 14", 32), ("36 - 6", 30), ("9 * 5", 45), ("45 / 9", 5), 
            ("15 + 20", 35), ("40 - 18", 22), ("3 * 12", 36), ("36 / 12", 3), 
            ("17 + 8", 25), ("25 - 10", 15), ("6 * 5", 30), ("30 / 6", 5), 
            ("20 + 10", 30), ("30 - 15", 15), ("8 * 4", 32), ("32 / 8", 4), 
            ("12 + 9", 21), ("21 - 6", 15), ("7 * 3", 21), ("21 / 7", 3), 
            ("14 + 5", 19), ("25 - 14", 11), ("9 * 4", 36), ("36 / 9", 4), 
            ("16 + 13", 29), ("29 - 7", 22), ("8 * 6", 48), ("48 / 8", 6), 
            ("15 + 12", 27), ("20 - 9", 11), ("5 * 9", 45), ("45 / 5", 9), 
            ("14 + 10", 24), ("40 - 16", 24), ("6 * 7", 42), ("42 / 6", 7), 
            ("17 + 6", 23), ("23 - 5", 18), ("9 * 3", 27), ("27 / 9", 3), 
            ("13 + 11", 24), ("25 - 5", 20), ("5 * 8", 40), ("40 / 8", 5), 
            ("12 + 14", 26), ("26 - 15", 11), ("6 * 4", 24), ("24 / 6", 4), 
            ("10 + 20", 30), ("30 - 20", 10), ("9 * 2", 18), ("18 / 2", 9), 
            ("22 - 6", 16), ("11 + 12", 23), ("7 + 18", 25), ("20 / 4", 5), 
            ("5 * 7", 35), ("28 / 7", 4), ("25 + 25", 50), ("40 - 13", 27), 
            ("8 * 7", 56), ("56 / 7", 8), ("30 + 5", 35), ("35 - 10", 25), 
            ("3 * 9", 27), ("27 / 3", 9), ("15 + 6", 21), ("21 - 8", 13), 
            ("8 + 19", 27), ("36 / 4", 9), ("9 * 5", 45), ("45 / 9", 5), 
            ("13 + 7", 20), ("20 - 11", 9), ("4 * 10", 40), ("40 / 10", 4), 
            ("18 + 18", 36), ("36 - 19", 17), ("6 * 6", 36), ("36 / 6", 6), 
            ("17 + 13", 30), ("30 - 10", 20), ("10 * 2", 20), ("20 / 2", 10), 
            ("19 + 11", 30), ("30 - 12", 18), ("3 * 7", 21), ("21 / 7", 3), 
            ("14 + 14", 28), ("28 - 13", 15), ("9 * 6", 54), ("54 / 9", 6), 
            ("12 + 18", 30), ("30 - 8", 22), ("2 * 8", 16), ("16 / 8", 2), 
            ("13 + 16", 29), ("29 - 9", 20), ("8 + 22", 30), ("30 - 4", 26), 
            ("4 * 9", 36), ("36 / 4", 9), ("25 + 8", 33), ("33 - 6", 27), 
            ("7 * 5", 35), ("35 / 7", 5), ("18 + 3", 21), ("21 - 5", 16), 
            ("10 * 6", 60), ("60 / 6", 10), ("16 + 15", 31), ("31 - 14", 17), 
            ("11 * 2", 22), ("22 / 11", 2), ("10 + 23", 33), ("33 - 15", 18), 
            ("8 * 4", 32), ("32 / 4", 8), ("6 + 25", 31), ("31 - 9", 22), 
            ("9 * 7", 63), ("63 / 7", 9), ("19 + 12", 31), ("31 - 16", 15), 
            ("15 / 5", 3), ("9 * 2", 18), ("23 + 7", 30), ("30 - 14", 16), 
            ("16 / 2", 8), ("19 - 5", 14), ("20 + 8", 28), ("28 - 12", 16), 
            ("4 * 8", 32), ("32 / 8", 4), ("12 + 14", 26), ("26 - 9", 17), 
            ("7 * 8", 56), ("56 / 7", 8), ("5 + 12", 17), ("17 - 6", 11), 
            ("11 * 3", 33), ("33 / 11", 3), ("19 + 8", 27), ("27 - 13", 14), 
            ("9 * 4", 36), ("36 / 9", 4), ("13 + 5", 18), ("18 - 7", 11), 
            ("10 * 3", 30), ("30 / 10", 3), ("12 + 19", 31), ("31 - 15", 16), 
            ("15 / 3", 5), ("5 * 6", 30), ("14 + 8", 22), ("22 - 12", 10), 
            ("7 + 6", 13), ("13 - 9", 4), ("4 * 3", 12), ("12 / 4", 3),
        
        };

        StartCoroutine(QuestionTimer());
    }

    IEnumerator QuestionTimer()
    {
        while (crashScript != null && crashScript.vidas > 0)
        {
            yield return new WaitForSeconds(10);
            ShowQuestion();
        }
    }

    void ShowQuestion()
    {
        Time.timeScale = 0; // Pausa el juego
        isPaused = true;
        questionPanel.SetActive(true);

        // Selecciona una pregunta aleatoria
        var question = questions[Random.Range(0, questions.Count)];
        questionText.text = question.Item1;
        answerInput.text = "";
        answerInput.ActivateInputField();
    }

    public void CheckAnswer()
    {
        if (isPaused)
        {
            int correctAnswer = questions.Find(q => q.Item1 == questionText.text).Item2;
            int playerAnswer;

            if (int.TryParse(answerInput.text, out playerAnswer) && playerAnswer == correctAnswer)
            {
                questionPanel.SetActive(false);
                Time.timeScale = 1; // Reanuda el juego
                isPaused = false;

                // Aumenta la velocidad del coche
                carController.carVelocity -= 0.02f; // Incrementa velocidad
                carController.rb2d.velocity = new Vector2(0, carController.carVelocity); // Actualiza la velocidad
            }
            else
            {
                // Resta una vida si la respuesta es incorrecta
                crashScript.vidas--;

                if (crashScript.vidas <= 0)
                {
                    // Lógica de Game Over
                    SceneManager.LoadScene("gameover");
                }
                else
                {
                    ShowQuestion(); // Muestra otra pregunta si falla
                }
            }
        }
    }
}
